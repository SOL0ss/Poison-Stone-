package rhitems.itemtrait;

import com.github.alexthe666.alexsmobs.effect.AMEffectRegistry;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.client.util.ITooltipFlag;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.player.ServerPlayerEntity;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.EffectInstance;
import net.minecraft.potion.Effects;
import net.minecraft.util.text.ITextComponent;
import net.minecraft.util.text.TranslationTextComponent;
import net.minecraft.world.World;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.event.entity.living.LivingDamageEvent;
import net.minecraftforge.event.entity.living.LivingHurtEvent;
import net.minecraftforge.event.entity.player.AttackEntityEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import rhitems.init.Items;
import top.theillusivec4.curios.api.CuriosApi;
import top.theillusivec4.curios.api.SlotContext;
import top.theillusivec4.curios.api.type.capability.ICurioItem;

import javax.annotation.Nullable;
import java.util.List;
@Mod.EventBusSubscriber(modid = "rhitems", bus = Mod.EventBusSubscriber.Bus.FORGE, value = Dist.CLIENT)
public class POISON_STONE extends Item implements ICurioItem {

    public POISON_STONE(Properties properties) {
        super(properties);
    }


    @Override
    public void addInformation(ItemStack stack, @Nullable World worldIn, List<ITextComponent> tooltip, ITooltipFlag flagIn) {

        if (Screen.hasShiftDown()) {
            tooltip.add(new TranslationTextComponent("tooltip.rhitems.poison_stone_shift"));
        } else {
            tooltip.add(new TranslationTextComponent("tooltip.rhitems.poison_stone"));
        }
        super.addInformation(stack, worldIn, tooltip, flagIn);
    }

    public static boolean isEquipped = false;

    @Deprecated
    public void curioTick(String identifier, int index, LivingEntity livingEntity, ItemStack stack) {

        PlayerEntity player = (PlayerEntity) livingEntity;
        if (!player.world.isRemote()) {

            boolean playerhashunger = player.isPotionActive(Effects.HUNGER);
            if (playerhashunger)
                player.removePotionEffect(Effects.HUNGER);

            boolean playerhaspoisonresistance = player.isPotionActive(AMEffectRegistry.POISON_RESISTANCE);
            if (!playerhaspoisonresistance)
                player.addPotionEffect(new EffectInstance(AMEffectRegistry.POISON_RESISTANCE, 200, 0, false, false));

            defaultInstance.curioTick(identifier, index, livingEntity);
        }
    }

    @Deprecated
    public void onEquip(SlotContext slotContext, ItemStack prevStack, ItemStack stack) {

        isEquipped = true;

        this.onEquip(slotContext.getIdentifier(), slotContext.getIndex(), slotContext.getWearer(), stack);
    }

    @Deprecated
    public void onUnequip(SlotContext slotContext, ItemStack newStack, ItemStack stack) {

        isEquipped = false;

        this.onUnequip(slotContext.getIdentifier(), slotContext.getIndex(), slotContext.getWearer(), stack);
    }


    @SubscribeEvent
    public static void modifyDamageDealt(LivingHurtEvent event) {

        LivingEntity target = event.getEntityLiving();

        float damage = (float) (event.getAmount() * 1.30);
        boolean targethaspoison = target.isPotionActive(Effects.POISON);

        if (isEquipped && targethaspoison) {
            event.setAmount(damage);
        }
    }


    @SubscribeEvent
    public static void onPlayerAttackEntity(LivingDamageEvent event) {

        if (isEquipped && random.nextFloat() > 0.8F) {

            LivingEntity target = event.getEntityLiving();
            target.addPotionEffect(new EffectInstance(Effects.POISON, 200, 1));

        }
    }
}



